import { useRouter } from "next/router";
import { useState, useEffect } from "react";
import styles from "../../styles/Home.module.css";
import Head from "next/head";
import Link from "next/link";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const TodoDetail = () => {
  const router = useRouter();
  const query = router.query;
  const id = query.id;

  const [todoItemTitle, setTodoItemTitle] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  const notify = () => toast("保存に成功しました。");

  useEffect(() => {
    if (router.isReady) {
      // get todo detail by id
      const todoListStr = localStorage.getItem("todoList");
      if (todoListStr) {
        const todoList = JSON.parse(todoListStr);
        const todoItem = todoList.find((todo) => todo.id === id);
        setTodoItemTitle(todoItem.title);
      }
    }
  }, [query, router]);

  const wait = (milisec) => {
    return new Promise((resolve, reject) => {
      setTimeout(resolve, milisec);
    });
  };

  /** Update TODO in the local storage */
  const editTodo = async (todoTitle) => {
    setIsLoading(true);
    await wait(500);
    const todoList = JSON.parse(localStorage.getItem("todoList"));
    const newTodoList = todoList.map((todoItem) => {
      if (todoItem.id === id) {
        todoItem.title = todoTitle;
      }
      return todoItem;
    });
    setTodoItemTitle(todoTitle);
    localStorage.setItem("todoList", JSON.stringify(newTodoList));
    setIsLoading(false);
    notify();
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>TODOアプリ</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/ye-connect.ico" />
      </Head>

      <main className={styles.main}>
        <div>
          <h1>Todo詳細ページ</h1>
          <p>Todoのタイトル:「{todoItemTitle}」を編集します</p>
          <div className="grid grid-cols-3 gap-4">
            <div className="col-span-2">
              <input
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                type="text"
                autoFocus={true}
                placeholder="Todo List"
                value={todoItemTitle}
                onChange={(e) => setTodoItemTitle(e.target.value)}
              ></input>
            </div>

            <div className="todo_item_button">
              {isLoading ? (
                <button className="bg-blue-500 text-white font-bold py-2 px-4 rounded opacity-50 cursor-not-allowed">
                  Editing...
                </button>
              ) : (
                <button
                  onClick={() => {
                    editTodo(todoItemTitle);
                  }}
                  className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
                >
                  Edit
                </button>
              )}
            </div>
          </div>

          {/** Link to index page */}
          <div>
            <Link href="/">
              <button className="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">
                <svg
                  id="Layer_1"
                  data-name="Layer 1"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 122.88 122.88"
                >
                  <defs></defs>
                  <title>back</title>
                  <path
                    className="cls-1"
                    d="M61.44,0A61.51,61.51,0,1,1,18,18,61.25,61.25,0,0,1,61.44,0Zm5,45.27A7.23,7.23,0,1,0,56.14,35.13L35,56.57a7.24,7.24,0,0,0,0,10.15l20.71,21A7.23,7.23,0,1,0,66.06,77.62l-8.73-8.87,24.86-.15a7.24,7.24,0,1,0-.13-14.47l-24.44.14,8.84-9Z"
                  />
                </svg>
                <span>Back Home</span>
              </button>
            </Link>
          </div>
        </div>
        <ToastContainer
          position="bottom-right"
          autoClose={3000}
          hideProgressBar={false}
          newestOnTop={false}
          closeOnClick
          rtl={false}
          pauseOnFocusLoss
          draggable
          pauseOnHover
        />
      </main>
    </div>
  );
};

export default TodoDetail;
